#GigaChat
from aiohttp.web_fileresponse import content_type
from langchain.schema import HumanMessage, SystemMessage
from langchain_gigachat.chat_models.gigachat import GigaChat

#TeleBot libs
from aiogram import Bot, Dispatcher, html, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import CommandStart, Command

#other libs
import asyncio
import json
import logging
import sys

#local libs
from notProject import JokeGenerator
from mentalResponse import MentalResponse

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ç–µ–ª–µ–≥—Ä–∞–º –∏ —Å–±–µ—Ä API
with open("api_config.json") as api_config:
    config = json.load(api_config)
    token = config["bot_api_token"]
    sber_aut = config["sber_aut"]

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è 20 (2/5)
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=token)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


giga = GigaChat(
        # –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –ø—Ä–æ–µ–∫—Ç–µ GigaChat API
        credentials=sber_aut,
        verify_ssl_certs=False,
    )

kb_start = [
        [
           types.KeyboardButton(text="–•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∫—ÉüôÅ")
        ],
        [
            types.KeyboardButton(text="–•–æ—á—É –∞–Ω–µ–∫–¥–æ—Ç"),
            types.KeyboardButton(text="–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å!")
        ],
    ]

class UserState(StatesGroup):
    waiting_for_response = State()

#–±–∞–∑–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    markup = types.ReplyKeyboardMarkup(keyboard=kb_start, resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –ø–æ–∫–∞ —É–º–µ—é —Ç–æ–ª—å–∫–æ –∞–Ω–µ–∫–¥–æ—Ç, —Ö–æ—á–µ—à—å –∞–Ω–µ–∫–¥–æ—Ç?",reply_markup=markup)

#—Ö—ç–Ω–¥–ª–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
@dp.message(Command("help"))
async def cmd_help(message: types.Message) -> None:
    await message.answer("–Ω–µ —Å–µ–π—á–∞—Å")

#—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞
@dp.message(F.text == "–•–æ—á—É –∞–Ω–µ–∫–¥–æ—Ç")
async def cmd_joke(message: types.Message) -> None:
    ranom_joke = await JokeGenerator.randomJoke()
    await message.answer(str(ranom_joke))

#–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç –∫ –ø—Ä–æ—Ñ-–ø–æ–º–æ—â–∏ —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç.
@dp.message(F.text == "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å!")
async def cmd_mental_help(message: types.Message) -> None:
    button = types.InlineKeyboardButton(text="–ü—Ä–æ—Ñ. –ø–æ–º–æ—â—å", url="http://yasno.live/?ysclid=m6g5tdgprs390565986")
    markup = types.InlineKeyboardMarkup(inline_keyboard=[[button]])
    await message.reply("–î–µ—Ä–∂–∏ üòù", reply_markup=markup)

#–∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ gigaChat
@dp.message(F.text == "–•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∫—ÉüôÅ")
async def cmd_mental_giga_help(message: types.Message, state: FSMContext) -> None:
    kb = [
        [
            types.KeyboardButton(text="–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å!"),
            types.KeyboardButton(text="–°—Ç–æ–ø")
        ],
    ]
    markup = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await message.reply(text="–ß—Ç–æ –≤–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç?", reply_markup=markup)
    await state.set_state(UserState.waiting_for_response)

#–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è(–≤—ã—Ö–æ–¥)
@dp.message(UserState.waiting_for_response, F.text.casefold() == "—Å—Ç–æ–ø")
async def bot_stop(message: types.Message, state: FSMContext) -> None:
    markup = types.ReplyKeyboardMarkup(keyboard=kb_start, resize_keyboard=True)
    await message.reply(text="üí´–ü–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ωüí´\n–ß—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞–∂–º–∏—Ç–µ\n–•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∫—ÉüôÅ", reply_markup=markup)
    await state.clear()

#–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ gigaChat
@dp.message(UserState.waiting_for_response)
async def bot_response(message: types.Message, state: FSMContext) -> None:
    user_text = message.text
    #bot_result = await MentalResponse.gigachat_response(user_text, giga)
    bot_result = "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å—Å—è API"
    print(bot_result)
    await message.reply(text=bot_result)

#–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ
@dp.message(F.content_type.in_({'photo', 'voice'}))
async def bot_photo(message: types.Message) -> None:
    await message.reply("–ë–æ—Ç –Ω–µ —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


#–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –∏ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@dp.message()
async def uncorrect_message(message: types.Message, state: FSMContext) -> None:
    await message.reply(text="–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–µ–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π\n[–•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∫—ÉüôÅ] —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º")

#
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped.")