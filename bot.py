# GigaChat
from aiohttp.web_fileresponse import content_type
from langchain.chains.question_answering.map_reduce_prompt import messages
from langchain.schema import HumanMessage, SystemMessage
from langchain_gigachat.chat_models.gigachat import GigaChat

# Aiogram libs
from aiogram import Bot, Dispatcher, html, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import CommandStart, Command

# Other libs
import asyncio
import json
import logging
import sys
import random

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –º–æ–¥—É–ª—è —à—É—Ç–æ–∫ –∏ –º–æ–¥—É–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
from notProject import JokeGenerator
from mentalResponse import MentalResponse

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ç–µ–ª–µ–≥—Ä–∞–º –∏ —Å–±–µ—Ä API
with open("api_config.json") as api_config:
    config = json.load(api_config)
    token = config["bot_api_token"]
    sber_aut = config["sber_aut"]

# –ú–æ–¥—É–ª—å –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
with open("motivation_techniques.json", encoding="utf-8") as f:
    data = json.load(f)

quotes = [item for item in data if item["category"] == "—Ü–∏—Ç–∞—Ç–∞"]
techniques = [item for item in data if item["category"] == "—Ç–µ—Ö–Ω–∏–∫–∞"]
story = [item for item in data if item["category"] == "–∏—Å—Ç–æ—Ä–∏—è"]
article = [item for item in data if item["category"] == "—Å—Ç–∞—Ç—å—è"]


# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è 20 (2/5)
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=token)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

giga = GigaChat(
        # –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –ø—Ä–æ–µ–∫—Ç–µ GigaChat API
        credentials=sber_aut,
        verify_ssl_certs=False,
    )

# –ù–∞—á–∞–ª—å–Ω—ã–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è (start)
kb_start = [
        [
           types.KeyboardButton(text="ü§ó–•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∫—Éü§ó")
        ],
        [
            types.KeyboardButton(text="‚ú®–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ‚ú®")
        ],
        [
            types.KeyboardButton(text="üòÇ–•–æ—á—É –∞–Ω–µ–∫–¥–æ—ÇüòÇ"),
            types.KeyboardButton(text="üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å üÜò")
        ],
    ]

class UserState(StatesGroup):
    waiting_for_response = State()

# –ë–∞–∑–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    markup = types.ReplyKeyboardMarkup(keyboard=kb_start, resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –ø–æ–∫–∞ —É–º–µ—é —Ç–æ–ª—å–∫–æ –∞–Ω–µ–∫–¥–æ—Ç, —Ö–æ—á–µ—à—å –∞–Ω–µ–∫–¥–æ—Ç?",reply_markup=markup)

# –•—ç–Ω–¥–ª–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
@dp.message(Command("help"))
async def cmd_help(message: types.Message) -> None:
    await message.answer("–Ω–µ —Å–µ–π—á–∞—Å")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞
@dp.message(F.text == "üòÇ–•–æ—á—É –∞–Ω–µ–∫–¥–æ—ÇüòÇ")
async def cmd_joke(message: types.Message) -> None:
    ranom_joke = await JokeGenerator.randomJoke()
    await message.answer(str(ranom_joke))

# –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç –∫ –ø—Ä–æ—Ñ-–ø–æ–º–æ—â–∏ —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç.
@dp.message(F.text == "üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å üÜò")
async def cmd_mental_help(message: types.Message) -> None:
    button = types.InlineKeyboardButton(text="–ü—Ä–æ—Ñ. –ø–æ–º–æ—â—å", url="http://yasno.live/?ysclid=m6g5tdgprs390565986")
    markup = types.InlineKeyboardMarkup(inline_keyboard=[[button]])
    await message.reply("–î–µ—Ä–∂–∏ üòù", reply_markup=markup)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–æ–ø–æ–∫
@dp.message(F.text == "‚ú®–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ‚ú®")
async def cmd_inspiration(message: types.Message) -> None:
    kb = [
        [types.InlineKeyboardButton(text="üß† –¢–µ—Ö–Ω–∏–∫–∏", callback_data="button_tech")],
        [types.InlineKeyboardButton(text="üí¨ –¶–∏—Ç–∞—Ç—ã", callback_data="button_quote")],
        [types.InlineKeyboardButton(text="üìñ –ò—Å—Ç–æ—Ä–∏–∏", callback_data="button_story")],
        [types.InlineKeyboardButton(text="üìù –°—Ç–∞—Ç—å–∏", callback_data="button_article")],
    ]
    markup = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer("*–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:*", reply_markup=markup, parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π callback_data –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.callback_query(F.data == 'button_tech')
async def process_callback_button_tech(call: types.CallbackQuery) -> None:
    await call.answer()
    random_tech = random.randint(0, len(techniques) - 1)
    await call.message.answer(text=f"*{techniques[random_tech]['title']}*\n\n{techniques[random_tech]['text']}", parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(F.data == 'button_quote')
async def process_callback_button_quote(call: types.CallbackQuery) -> None:
    await call.answer()
    random_quote = random.randint(0, len(quotes) - 1)
    await call.message.answer(text=quotes[random_quote]['text'], parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(F.data == 'button_story')
async def process_callback_button_story(call: types.CallbackQuery) -> None:
    await call.answer()
    random_story = random.randint(0, len(story) - 1)
    await call.message.answer(text=f"*{story[random_story]['title']}*\n{story[random_story]['text']}", parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(F.data == 'button_article')
async def process_callback_button_article(call: types.CallbackQuery) -> None:
    await call.answer()
    random_article = random.randint(0, len(article) - 1)
    button = types.InlineKeyboardButton(text=f"{article[random_article]["title"]}", url=article[random_article]["text"])
    markup = types.InlineKeyboardMarkup(inline_keyboard=[[button]])
    await call.message.answer("–ü—Ä–æ—á–∏—Ç–∞–π, –ø–æ–º–æ–∂–µ—Ç:", reply_markup=markup)

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ gigaChat
@dp.message(F.text == "ü§ó–•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∫—Éü§ó")
async def cmd_mental_giga_help(message: types.Message, state: FSMContext) -> None:
    kb = [
        [
            types.KeyboardButton(text="üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å üÜò"),
            types.KeyboardButton(text="–°—Ç–æ–ø")
        ],
    ]
    markup = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await message.reply(text="–ß—Ç–æ –≤–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç?", reply_markup=markup)
    await state.set_state(UserState.waiting_for_response)

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è(–≤—ã—Ö–æ–¥)
@dp.message(UserState.waiting_for_response, F.text.casefold() == "—Å—Ç–æ–ø")
async def bot_stop(message: types.Message, state: FSMContext) -> None:
    markup = types.ReplyKeyboardMarkup(keyboard=kb_start, resize_keyboard=True)
    await message.reply(text="üí´–ü–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ωüí´\n\n–ß—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞–∂–º–∏—Ç–µ\n\nü§ó–•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∫—Éü§ó", reply_markup=markup)
    await state.clear()

# –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ gigaChat
@dp.message(UserState.waiting_for_response)
async def bot_response(message: types.Message, state: FSMContext) -> None:
    user_text = message.text
    #bot_result = await MentalResponse.gigachat_response(user_text, giga)
    bot_result = "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å—Å—è API"
    print(bot_result)
    await message.reply(text=bot_result)

# –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≥–æ–ª—Å–æ–≤–æ–µ
@dp.message(F.content_type.in_({'photo', 'voice'}))
async def bot_photo(message: types.Message) -> None:
    await message.reply("–ë–æ—Ç –Ω–µ —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


# –ö–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –∏ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@dp.message()
async def uncorrect_message(message: types.Message, state: FSMContext) -> None:
    await message.reply(text="–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.\n–í–æ—Å–ø–æ–ª—å–∑—É–µ–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π [ü§ó–•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∫—Éü§ó] —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped.")